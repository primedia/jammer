#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'jammer'
require 'ostruct'
require 'json'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |command, arg|
    if command
      process_command command, arg
    else
      install_jamfile
    end
  end

  class << self
    VERSION_LEVELS = ['major', 'minor', 'patch']

    def process_command(command, arg)
      case command.downcase
      when "new"
        create_package arg
      when "install"
        install_jamfile
      when "publish"
        location = arg ? arg : '.'
        publish_package location
      when "bump"
        bump_package arg
      end
    end

    def create_package(name)
      if name && valid_name(name)
        Jammer.create_package package_info(name)
      else
        exit_now! 64, "Whoops! A package name must be provided for the 'new' command."
      end
    end

    def publish_package(package_location)
      begin
        if publishable_package(package_location)
          repository = options[:repository] if options[:repository]
          package_json_file = File.join package_location, 'package.json'
          package_info = Jammer::PackageInfo.fromJSON(File.read(package_json_file))
          Jammer.publish_package package_location, package_info, repository
        end
      rescue StandardError => e
        exit_now! 1, e.message
      end
    end

    def bump_package(version_level)
      if VERSION_LEVELS.include? version_level
        Jammer.bump_package version_level
      else
        exit_now! 1, "A valid version level (#{version_levels.join('|')}) must be provided."
      end
    end

    def install_jamfile
      Jammer.install_packages
    end

    def valid_name(name)
        force || check_directory(name)
    end

    def force
      options[:force]
    end

    def package_info(name, info = Jammer::PackageInfo, url = '')
      info.new(name, package_description("The #{name} package."), package_url(url))
    end

    def package_description(default)
      user_response "Package description", default
    end

    def package_url(default)
      user_response "Package homepage", default
    end

    def user_response(query, default)
      print "#{query} ('#{default}'):"
      response = STDIN.gets.chomp
      response.empty? ? default : response
    end

    def check_directory(name)
      if file_exists(name)
        exit_now! 1, "A directory named '#{name}' already exists. Use '--force' to overwrite the existing directory."
      else
        true
      end
    end

    def file_exists(name)
      File.exists? name
    end

    def publishable_package(package_location)
      Dir.chdir(package_location) do
        raise(StandardError, 'You must be in a package directory to publish a package.') unless file_exists 'package.json'

        package = JSON.parse(File.read('package.json'))

        package['jam']['include'].each do |included|
          raise(StandardError, "#{included} was listed to be included but could not be found") unless file_or_source_exists(included)
        end

        git = File.exists?(File.join(package_location, '.git'))
        raise(StandardError, "Package must be a git repository to publish") unless git

        branch = `git rev-parse --abbrev-ref HEAD`
        raise(StandardError, "You must be on the master branch for the package you want to publish.") unless branch == "master"

        tag = "#{package['name']}-v#{package['version']}"
        raise(StandardError, "#{package['version']} has already been tagged. Please increment the version number.") if `git tag`.match tag

        return true
      end
    end

    def file_or_source_exists(name)
      file_exists name.match('js') ? "./src/#{name.sub('js', '')}coffee" : name
    end
  end

  on "-f", "--force", "Force package creation on specified directory."
  on "-r", "--repository", "Use specified repository for publishing"

  arg :command, :optional
  arg :arg, :optional

  version Jammer::VERSION
  description "Jam Package Creator"

  use_log_level_option

  go!
end
