#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'jammer'
require 'ostruct'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |command, arg|
    if command
      process_command command, arg
    else
      install_jamfile
    end
  end

  class << self

    def process_command(command, arg)
      case command.downcase
      when "new"
        create_package arg
      when "publish"
        publish_package arg
      when "bump"
        bump_package arg
      end
    end

    def create_package(name)
      if name && valid_name(name)
        Jammer.create_package package_info(name)
      else
        exit_now! 64, "Whoops! A package name must be provided for the 'new' command."
      end
    end

    def publish_package(package_name)

    end

    def bump_package(version_level)
      version_levels = ['major', 'minor', 'patch']
      if version_levels.include? version_level
        Jammer.bump_package version_level
      else
        exit_now! 1, "A valid version level (#{version_levels.join('|')}) must be provided."
      end
    end

    def install_jamfile
      Jammer.install_packages
    end

    def valid_name(name)
        force || check_directory(name)
    end

    def force
      options[:force]
    end

    def package_info(name, info = Jammer::PackageInfo)
      info.new(name, package_description("The #{name} package."), package_url(''))
    end

    def package_description(default)
      user_response "Package description", default
    end

    def package_url(default)
      user_response "Package homepage", default
    end

    def user_response(query, default)
      print "#{query} ('#{default}'):"
      response = STDIN.gets.chomp
      response.empty? ? default : response
    end

    def check_directory(name)
      if directory_exists(name)
        exit_now! 1, "A directory named '#{name}' already exists. Use '--force' to overwrite the existing directory." 
      else
        true
      end
    end

    def directory_exists(name)
      File.exists? name
    end

  end

  on "-f", "--force", "Force package creation on specified directory."

  arg :command, :optional
  arg :arg, :optional

  version Jammer::VERSION
  description "Jam Package Creator"

  use_log_level_option

  go!
end
